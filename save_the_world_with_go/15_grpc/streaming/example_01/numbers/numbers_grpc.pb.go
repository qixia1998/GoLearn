// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package numbers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumServiceClient is the client API for NumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumServiceClient interface {
	Rnd(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (NumService_RndClient, error)
}

type numServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumServiceClient(cc grpc.ClientConnInterface) NumServiceClient {
	return &numServiceClient{cc}
}

func (c *numServiceClient) Rnd(ctx context.Context, in *NumRequest, opts ...grpc.CallOption) (NumService_RndClient, error) {
	stream, err := c.cc.NewStream(ctx, &NumService_ServiceDesc.Streams[0], "/numbers.NumService/Rnd", opts...)
	if err != nil {
		return nil, err
	}
	x := &numServiceRndClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NumService_RndClient interface {
	Recv() (*NumResponse, error)
	grpc.ClientStream
}

type numServiceRndClient struct {
	grpc.ClientStream
}

func (x *numServiceRndClient) Recv() (*NumResponse, error) {
	m := new(NumResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumServiceServer is the server API for NumService service.
// All implementations must embed UnimplementedNumServiceServer
// for forward compatibility
type NumServiceServer interface {
	Rnd(*NumRequest, NumService_RndServer) error
	mustEmbedUnimplementedNumServiceServer()
}

// UnimplementedNumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNumServiceServer struct {
}

func (UnimplementedNumServiceServer) Rnd(*NumRequest, NumService_RndServer) error {
	return status.Errorf(codes.Unimplemented, "method Rnd not implemented")
}
func (UnimplementedNumServiceServer) mustEmbedUnimplementedNumServiceServer() {}

// UnsafeNumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumServiceServer will
// result in compilation errors.
type UnsafeNumServiceServer interface {
	mustEmbedUnimplementedNumServiceServer()
}

func RegisterNumServiceServer(s grpc.ServiceRegistrar, srv NumServiceServer) {
	s.RegisterService(&NumService_ServiceDesc, srv)
}

func _NumService_Rnd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NumServiceServer).Rnd(m, &numServiceRndServer{stream})
}

type NumService_RndServer interface {
	Send(*NumResponse) error
	grpc.ServerStream
}

type numServiceRndServer struct {
	grpc.ServerStream
}

func (x *numServiceRndServer) Send(m *NumResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NumService_ServiceDesc is the grpc.ServiceDesc for NumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "numbers.NumService",
	HandlerType: (*NumServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rnd",
			Handler:       _NumService_Rnd_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "numbers.proto",
}
